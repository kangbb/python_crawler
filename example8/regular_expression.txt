#regular expression 正则表达式:描述字符串排列的一套规则

#原子： 正则表达式的最基本组成单位

#原子分类
#1）普通字符作为原子 
#   普通字符包括数字、大小写字母、下划线等
#   eg:"yue" 有3个原子，'y','u','e'
#2）非打印字符作为原子
#   一些在字符串中用于格式控制的
#   eg:\n \t
#3）通用字符作为原子
#   一个原子可以匹配一类字符
#   eg:\w 匹配任意一个字母、数字、下划线
#      \W 匹配除字母、数字、下划线以外的任意一个字符
#      \d 匹配任意一个十进制数
#      \D 匹配除十进制数以外的任意一个其他字符
#      \s 匹配任意一个空白字符
#      \S 匹配除空白字符以外的任意一个其他字符
#4）原子表
#   使用原子表，可以定义一组地位平等的原子，然后匹配
#的时候会取该原子表的任意一个原子进行匹配
#   eg:[xyz]py 那么xpython就可以匹配成功
#      [^xyz]py  除方括号内以外的原子均可以匹配

#元字符：具有一些特殊含义的字符 分为任意匹配符、边界限定符、限定符、模式选择符
#eg: . 匹配除换行符以外的任意字符
#    ^ 匹配字符串的开始位置
#    $ 匹配字符串的结束位置
#    * 匹配0次、1次或多次前面的原子
#    ? 匹配0次或1次前面的原子
#    + 匹配1次或多次前面的原子
#    {n} 前面的原子恰好出现n次
#    {n,} 前面的原子至少出现n次
#    {n, m} 前面的原子至少出现n次，至多出现m次
#    | 模式选择符
#    () 模式单元符
#模式选择符 |  可以设置多个模式，匹配时，可以选择任意一个模式匹配
#              eg:"python|php" 则匹配"python" "php" 中任意一个均可
#模式单元符 () 将一些原子组合成大院子使用，小括号括起来的部分会被当成一个整体去使用
#              eg:"(cd){1,}"  与 "cd{1,}" 是不同模式


#模式修正：不改变正则表达式的情况下，改变匹配结果
#eg: I 匹配时忽略大小写
     M 多行匹配
	 L 做本地化识别匹配
	 U 根据Unicode字符解析字符
	 S 让.匹配换行符，及调用该模式，"."可以匹配任意字符
#使用：(见代码model_recorrect.py)

#贪婪模式与懒惰模式
#贪婪模式：尽可能少地匹配
#懒惰模式：尽可能多的匹配
eg:(见代码lazy_hard_model.py)

--------------------------------------------------------
--------------------------------------------------------
#正则表达式函数
#常见： re.match()  re.search()  全局匹配函数  re.sub()
------
#re.match(pattern, string, flag)
# 从源字符串开头开始匹配
#   pattern 正则表达式
#   string 源字符
#   flag 可选参数，标志位，传递模式修正信息
# 可使用 re.match().span()直接获取span信息
------
#re.search(pattern, string, flag)
# 在全文中检索匹配
# eg:(match_search.py)
------
#全局匹配函数
# 以上两个函数最多只能匹配一个结果，匹配多个结果可用此方法实现
#   re.compile()预编译正则表达式
#   re.compile().findall()从源字符匹配所有结果
# eg:(global_func.py)
------
#re.sub(pattern, rep, string, max)
# 根据正则表达式替换某些字符串
#   pattern 正则表达式
#   rep     要替换成的字符串
#   string  源字符串
#   max     可选，最多替换的次数；默认全部替换
#eg:(re_sub_func.py)


